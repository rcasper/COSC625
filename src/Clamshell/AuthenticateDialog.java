package Clamshell;

import java.io.*;
import javax.swing.JOptionPane;
/**
 * Authenticate UI for Password Management System
 * COSC 625 Fall 2013
 * @author Andrew Ramsey
 * @version 1.1
 */
public class AuthenticateDialog extends javax.swing.JDialog {

    private boolean isAuthenticated = false;
    private File authFile  = null;
    private String userName;
    private String masterPass;
    
    /**
     * Creates new form AuthenticateDialog
     */
    public AuthenticateDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /**
     * Return authenticated status
     * @return 
     */
    public boolean getAuthenticated()
    {
        return isAuthenticated;
    }
    
    /**
     * Pass File which has been validated via authentication to main UI
     * @return 
     */
    public File getAuthFile()
    {
        return authFile;
    }
    
    /**
     * Return user name
     * @return 
     */
    public String getUsername()
    {
        return userName;
    }
    
    /**
     * Return master pass
     * @return 
     */
    public String getMasterPass()
    {
        return masterPass;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        username = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        newButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Authentication");
        setIconImage(null);
        setIconImages(null);
        setName(""); // NOI18N
        setResizable(false);

        username.setToolTipText("");
        username.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unamePassKeyTyped(evt);
            }
        });

        password.setToolTipText("");
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unamePassKeyTyped(evt);
            }
        });

        openButton.setText("Open");
        openButton.setToolTipText("Open Password File");
        openButton.setEnabled(false);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Password");

        jLabel3.setText("User Name");

        newButton.setText("New");
        newButton.setToolTipText("Create New Password File");
        newButton.setEnabled(false);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(newButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    /**
     * Attempt to Authenticate user
     * @param evt 
     */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        
        String encryptedUserName = encryptUnameRC4();
        
        // check if file exists, then check if password is matching        
        if (fileExists(encryptedUserName)){
            isAuthenticated = true;
            authFile = null; // set to null, file will be opened in context of ClamshellUI window instead so that it is not replaced with a new blank file
            this.dispose();// get rid of this instance
        }
        else // otherwise, throw error
        {
            JOptionPane.showMessageDialog(null, "User Name Does Not Exist", "Invalid User Name", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_openButtonActionPerformed

    /**
     * Create new password file with user input if does not exist
     * @param evt
     */
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        
        String encryptedUserName = encryptUnameRC4();
        
        // first check if file exists, if so report error                
        if (fileExists(encryptedUserName)){
            JOptionPane.showMessageDialog(null, "User Name Already Exists", "Invalid User Name", JOptionPane.ERROR_MESSAGE);
        }
        else // otherwise, proceed to create new file
        {
            // pop up window to confirm to user
            int confirm = JOptionPane.showConfirmDialog(null, "Create New Password File?", "Confirm", JOptionPane.OK_CANCEL_OPTION);
            
            if (confirm == JOptionPane.OK_OPTION) {
       
                isAuthenticated = true;
                authFile = new File(encryptedUserName);
                
                this.dispose();// get rid of this instance
                
            } else {
                // return to auhentication UI
            }
        }
    }//GEN-LAST:event_newButtonActionPerformed

    private void unamePassKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unamePassKeyTyped
        userName = username.getText();
        masterPass = password.getText();
        
        if (username.getText().length() > 1 && password.getText().length() > 1)
        {
            openButton.setEnabled(true);
            newButton.setEnabled(true);
        }
        else
        {
            openButton.setEnabled(false);
            newButton.setEnabled(false);
        }
    }//GEN-LAST:event_unamePassKeyTyped
    
    /**
     * Convert user name input to RC4-encrypted string
     * @return 
     */
    private String encryptUnameRC4(){
        
        return RC4Cipher(userName, masterPass);
    }
        
    /**
     * Check to see if file exists in default directory
     * @param s
     * @return 
     */
    private boolean fileExists(String s) {
        File f = new File(s);

        if (f.exists()) {
            return true;
        } else {
            return false;
        }
    }
    
    /**
     * Convert user name input to RC4-encrypted string
     * @return 
     */
    private String RC4Cipher(String u, String p)
    {
        // first convert to hexadecimal then byte array, then back to hex              
        return byteArrayToHexString(RC4(hexStringToByteArray(stringToHex(u)), hexStringToByteArray(stringToHex(p))));
    }
    
    /**
     * RC4 Cipher in Bytes
     *
     * @param unlocked
     * @param key
     * @return
     */
    public byte[] RC4(byte[] unlocked, byte[] key) {
        byte[] S = new byte[256];
        for (int temp = 0; temp < 256; temp++) {
            S[temp] = (byte) temp;
        }
        int j = 0;
        byte swap;
        int i;
        for (i = 0; i < 256; i++)//KSA
        {
            j = (j + key[i % key.length] + S[i]) & 255;
            swap = S[i];
            S[i] = S[j];
            S[j] = swap;
        }
        i = j = 0;
        byte[] keystream = new byte[unlocked.length];
        for (int place = 0; place < unlocked.length; place++)//PRGA //Middle argument is how much stream to gen
        {
            i = (i + 1) & 255;
            j = (j + S[i]) & 255;
            swap = S[i];
            S[i] = S[j];
            S[j] = swap;
            keystream[place] = S[(S[i] + S[j]) & 255];
        }
        byte[] ciphertext = new byte[keystream.length];
        for (int place = 0; place < ciphertext.length; place++) {
            ciphertext[place] = (byte) (keystream[place] ^ unlocked[place]);
        }
        return ciphertext;
    }
        
    private byte[] hexStringToByteArray(String s) {
        byte[] b = new byte[s.length() / 2];
        for (int i = 0; i < b.length; i++) {
            int index = i * 2;
            int v = Integer.parseInt(s.substring(index, index + 2), 16);
            b[i] = (byte) v;
        }
        return b;
    }
    
    private String byteArrayToHexString(byte[] b) {
        String result = "";
        for (int i = 0; i < b.length; i++) {
            result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
        }
        return result;
    }
    // convert back to plaintext
    public String byteToString(byte[] in){
        String output = "";
        for(int a = 0;a < in.length;a++)
        {
            output += (char)in[a];
        }
        return output;
    }
    // convert plaintext string to hexadecimal (length is always x2 plaintext)
    private String stringToHex(String string){
        StringBuilder buf = new StringBuilder(200);
        for (char ch : string.toCharArray()) {
            buf.append(String.format("%02x", (int) ch));
        }
        return buf.toString();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openButton;
    private javax.swing.JTextField password;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
